I'd be happy to generate the code for a stock dashboard application with the features you've described. I'll break this down into several parts: Flask backend, HTML template, JavaScript (D3.js), CSS, Dockerfile, and Helm chart. Let's start with the Python Flask code:

```python
# app.py
from flask import Flask, render_template, request, jsonify
import yfinance as yf
import pandas as pd

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_stock_data', methods=['POST'])
def get_stock_data():
    symbols = request.json['symbols']
    data = {}
    for symbol in symbols:
        stock = yf.Ticker(symbol)
        info = stock.info
        history = stock.history(period="1mo")
        data[symbol] = {
            'history': history['Close'].to_dict(),
            'market_cap': info.get('marketCap'),
            'pe_ratio': info.get('trailingPE'),
            'price_to_book': info.get('priceToBook'),
            'dividend_yield': info.get('dividendYield'),
        }
    return jsonify(data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
```

Now, let's create the HTML template:

```html
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>Stock Dashboard</h1>
        <input type="text" id="stockInput" placeholder="Enter stock symbols (comma-separated)">
        <button onclick="fetchStockData()">Fetch Data</button>
        <div id="chart"></div>
        <table id="stockTable">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Market Cap</th>
                    <th>P/E Ratio</th>
                    <th>Price to Book</th>
                    <th>Dividend Yield</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>
```

Next, let's create the JavaScript file with D3.js for chart rendering:

```javascript
// static/script.js
function fetchStockData() {
    const symbols = document.getElementById('stockInput').value.split(',').map(s => s.trim());
    fetch('/get_stock_data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ symbols: symbols }),
    })
    .then(response => response.json())
    .then(data => {
        renderChart(data);
        renderTable(data);
    });
}

function renderChart(data) {
    const margin = {top: 20, right: 20, bottom: 30, left: 50};
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    d3.select("#chart").html("");
    const svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    const x = d3.scaleTime().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    const line = d3.line()
        .x(d => x(d.date))
        .y(d => y(d.price));

    const allDates = Object.values(data).flatMap(d => Object.keys(d.history));
    const extent = d3.extent(allDates, d => new Date(d));
    x.domain(extent);

    const allPrices = Object.values(data).flatMap(d => Object.values(d.history));
    y.domain([d3.min(allPrices), d3.max(allPrices)]);

    svg.append("g")
        .attr("transform", `translate(0,${height})`)
        .call(d3.axisBottom(x));

    svg.append("g")
        .call(d3.axisLeft(y));

    const tooltip = d3.select("body").append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

    Object.entries(data).forEach(([symbol, stockData]) => {
        const stockLine = svg.append("path")
            .datum(Object.entries(stockData.history).map(([date, price]) => ({date: new Date(date), price: price})))
            .attr("fill", "none")
            .attr("stroke", getRandomColor())
            .attr("stroke-width", 1.5)
            .attr("d", line)
            .attr("class", `line-${symbol}`);

        stockLine.on("mouseover", function(event, d) {
            d3.select(this).attr("stroke-width", 3);
            highlightTableRow(symbol);
        })
        .on("mouseout", function(d) {
            d3.select(this).attr("stroke-width", 1.5);
            unhighlightTableRow();
        });

        svg.selectAll(`.dot-${symbol}`)
            .data(Object.entries(stockData.history))
            .enter().append("circle")
            .attr("class", `dot-${symbol}`)
            .attr("cx", d => x(new Date(d[0])))
            .attr("cy", d => y(d[1]))
            .attr("r", 3)
            .attr("fill", stockLine.attr("stroke"))
            .on("mouseover", function(event, d) {
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`${symbol}<br/>Date: ${d[0]}<br/>Price: $${d[1].toFixed(2)}`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", function(d) {
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            });
    });
}

function renderTable(data) {
    const tbody = d3.select("#stockTable tbody");
    tbody.html("");
    Object.entries(data).forEach(([symbol, stockData]) => {
        const row = tbody.append("tr")
            .attr("class", `row-${symbol}`)
            .on("mouseover", function() {
                highlightChartLine(symbol);
            })
            .on("mouseout", function() {
                unhighlightChartLine();
            });

        row.append("td").text(symbol);
        row.append("td").text(formatLargeNumber(stockData.market_cap));
        row.append("td").text(stockData.pe_ratio ? stockData.pe_ratio.toFixed(2) : 'N/A');
        row.append("td").text(stockData.price_to_book ? stockData.price_to_book.toFixed(2) : 'N/A');
        row.append("td").text(stockData.dividend_yield ? (stockData.dividend_yield * 100).toFixed(2) + '%' : 'N/A');
    });
}

function highlightChartLine(symbol) {
    d3.select(`.line-${symbol}`).attr("stroke-width", 3);
}

function unhighlightChartLine() {
    d3.selectAll(".line").attr("stroke-width", 1.5);
}

function highlightTableRow(symbol) {
    d3.select(`.row-${symbol}`).classed("highlighted", true);
}

function unhighlightTableRow() {
    d3.selectAll("tr").classed("highlighted", false);
}

function getRandomColor() {
    return `hsl(${Math.random() * 360}, 100%, 50%)`;
}

function formatLargeNumber(num) {
    if (num >= 1e12) return (num / 1e12).toFixed(1) + 'T';
    if (num >= 1e9) return (num / 1e9).toFixed(1) + 'B';
    if (num >= 1e6) return (num / 1e6).toFixed(1) + 'M';
    if (num >= 1e3) return (num / 1e3).toFixed(1) + 'K';
    return num;
}
```

Now, let's add some CSS styling:

```css
/* static/style.css */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f0f0;
}

.container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
}

h1 {
    text-align: center;
    color: #333;
}

input[type="text"] {
    width: 70%;
    padding: 10px;
    margin-right: 10px;
}

button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

#chart {
    margin-top: 20px;
    background-color: white;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #4CAF50;
    color: white;
}

tr:hover {
    background-color: #f5f5f5;
}

.tooltip {
    position: absolute;
    text-align: center;
    padding: 8px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
}

.highlighted {
    background-color: #e0e0e0;
}
```

Now, let's create a Dockerfile for the application:

```dockerfile
# Dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "app.py"]
```

Finally, let's create a Helm chart for deploying the application to Kubernetes. First, create a directory structure for the Helm chart:

```
stock-dashboard/
├── Chart.yaml
├── values.yaml
└── templates/
    ├── deployment.yaml
    └── service.yaml
```

Now, let's create the chart files:

```yaml
# Chart.yaml
apiVersion: v2
name: stock-dashboard
description: A Helm chart for the Stock Dashboard application
version: 0.1.0
appVersion: "1.0.0"
```

```yaml
# values.yaml
replicaCount: 1

image:
  repository: your-docker-registry/stock-dashboard
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi
```

```yaml
# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "stock-dashboard.fullname" . }}
  labels:
    {{- include "stock-dashboard.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "stock-dashboard.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "stock-dashboard.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
```

```yaml
# templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "stock-dashboard.fullname" . }}
  labels:
    {{- include "stock-dashboard.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "stock-dashboard.selectorLabels" . | nindent 4 }}
```

This completes the code for the stock dashboard application with the requested features. The application uses Flask for the backend, D3.js for creating interactive charts, and includes a Dockerfile and Helm chart for deployment to Kubernetes.

Would you like me to explain or break down any part of the code?